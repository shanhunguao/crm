package com.ykhd.office.component.timertask;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.ykhd.office.component.RedisService;
import com.ykhd.office.domain.entity.Customer;
import com.ykhd.office.domain.entity.WorkTask;
import com.ykhd.office.service.ICustomerService;
import com.ykhd.office.service.IOAScheduleService;
import com.ykhd.office.service.IOfficeAccountService;
import com.ykhd.office.service.IWorkTaskService;
import com.ykhd.office.util.DateUtil;
import com.ykhd.office.util.dictionary.Consts;
import com.ykhd.office.util.dictionary.StateEnums.State4WorkTask;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

/**
 * @author zhoufan
 * @Date 2020/9/12
 */
@Component
@EnableScheduling
public class MyTask {

    private static final Logger LOGGER = LoggerFactory.getLogger(MyTask.class);

    @Autowired
    private ICustomerService customerService;
    @Autowired
    private IWorkTaskService workTaskService;
    @Autowired
    private IOfficeAccountService officeAccountService;
    @Autowired
    private IOAScheduleService oaScheduleService;

    @Autowired
    private RedisService redisService;


//    /**
//     * 创建TaskScheduler Bean
//     */
//    @Bean
//    public TaskScheduler scheduledExecutorService() {
//        ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();
//        scheduler.setPoolSize(8);
//        scheduler.setThreadNamePrefix("scheduled-thread-");
//        return scheduler;
//    }

    /**
     * 检测进行中的工作任务是否延期
     */
    @Scheduled(cron = "0 1 0 * * ?")
    public void checkWorkTask() {
        LOGGER.info("自动检测进行中的工作任务是否延期");
        Date short_date = DateUtil.yyyyMMdd2date(DateUtil.date2yyyyMMdd(new Date()));
        List<WorkTask> all = workTaskService.list(new QueryWrapper<WorkTask>().select("id", "plan_finish_date").eq("state", State4WorkTask.进行中.code()));
        List<Integer> ids = all.stream().filter(v -> DateUtil.yyyyMMdd2date(v.getPlanFinishDate()).before(short_date)).map(WorkTask::getId).collect(Collectors.toList());
        LOGGER.info("延期任务数：" + ids.size());
        if (!ids.isEmpty())
            if (workTaskService.update(new UpdateWrapper<WorkTask>().in("id", ids).set("state", State4WorkTask.延期.code())))
                LOGGER.info("延期更改完成");
    }

    /**
     * 两个月不存在排期的客户信息自动掉入公海
     */
    @Scheduled(cron = "0 5 0 * * ?")
    public void backHighSeas() {
        Date now = new Date();
        List<Customer> list = customerService.list(new QueryWrapper<Customer>().select("id", "draw_time").eq("is_lock", "0"));
        List<Integer> customerId = null;
        if (list != null && list.size() > 0) {
            customerId = list.stream().filter(v -> v.getDrawTime().before(DateUtil.monthsAgo(now, 2))).map(Customer::getId).collect(Collectors.toList());
        }
        if (customerId != null && customerId.size() > 0) {
            LOGGER.info("掉入公海的客户数量：" + customerId.size());
            customerService.update(new UpdateWrapper<Customer>().in("id", customerId).set("is_lock", "1").set("draw_time", null).set("belong_user", null));
        }
    }


    /**
     * 数据备份
     * 每天中午十二点执行
     */
    @Scheduled(cron = "0 0 12 * * ?")
    public void saveBackup() {
        File file = new File("C:\\backup_file\\ykhd");
        if (file.exists()) {
            deleteFile(file);
        }
        Runtime rt = Runtime.getRuntime();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
        Date date = new Date();
        // 要用来做导入用的sql目标文件：
        String filename = "C:\\backup_file\\ykhd" + "\\" + "ykhd" + sdf.format(date) + ".sql";
        //调用外部执行exe文件的javaAPI
        try {
            //使用命令--ignore-table备份数据库时忽略yw_bill_voucher表  yw_medium_snipaste  yw_payment_voucher
            rt.exec("cmd /c mysqldump -hlocalhost -uroot -pfxd891219 -x yw_ykhd " +
                    "--ignore-table=yw_ykhd.yw_payment_voucher --ignore-table=yw_ykhd.yw_medium_snipaste --ignore-table=yw_ykhd.yw_bill_voucher >" + filename);
            LOGGER.info("数据库备份成功.......................................");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void deleteFile(File file) {
        //取得这个目录下的所有子文件对象
        File[] files = file.listFiles();
        //遍历该目录下的文件对象
        for (File f : files) {
            //打印文件名
            String name = file.getName();
            System.out.println(name);
            //判断子目录是否存在子目录,如果是文件则删除
            if (f.isDirectory()) {
                deleteFile(f);
            } else {
                f.delete();
            }
        }
    }


    /**
     * 公众号媒介掉入公海
     * 每天凌晨两点执行
     */
//    @Scheduled(cron = "0 0/5 * * * ?")
    @Scheduled(cron = "0 0 2 * * ?")
    public void OfficeAccountbackHighSeas() {
        int count = 0;
//        查询所有已有对接媒介的公众号ID
        List<Integer> ids = officeAccountService.findids();
        for (int i = 0; i < ids.size(); i++) {
//            查询公众号ID最近投放时间
            Date putedate = oaScheduleService.Latestlaunchtime(ids.get(i));
            if (putedate == null) {
//                处理没有建过排期的公众号
                if (redisService.existKey(Consts.OFFICEACCOUNT_PREFIX + ids.get(i))) {
                    int total = Integer.valueOf(redisService.getValue(Consts.OFFICEACCOUNT_PREFIX + ids.get(i)));
                    if (total > 30) {
                        System.out.println("掉入公海的公众号ID" + ids.get(i));
                        officeAccountService.delmediumid(ids.get(i));
                        redisService.delKV(Consts.OFFICEACCOUNT_PREFIX + ids.get(i));
                    } else {
                        total=total+1;
                        redisService.setKV(Consts.OFFICEACCOUNT_PREFIX + ids.get(i), String.valueOf(total), null);
                    }
                } else {
                    redisService.setKV(Consts.OFFICEACCOUNT_PREFIX + ids.get(i), "1", null);
                }
            } else {
                //            当前时间大于公众号投放时间30天，掉入公海
                int days = DateUtil.intervalDays(putedate, new Date());
                if (days > 30) {
                    System.out.println("掉入公海的公众号ID" + ids.get(i));
                    officeAccountService.delmediumid(ids.get(i));
                    count++;
                }
            }
        }
        LOGGER.info("公众号掉入公海总数：" + count);
    }


}
